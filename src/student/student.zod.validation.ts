import { z } from 'zod';
import validator from 'validator';

const userNameSchema = z.object({
  firstName: z
    .string()
    .min(1, 'First name is required')
    .max(20, 'First name max length 20 characters')
    .refine((val) => val.trim() === val, {
      message: 'First name should not have leading or trailing spaces',
    })
    .refine((val) => val.charAt(0).toUpperCase() + val.slice(1) === val, {
      message: 'First name should be capitalized',
    }),
  middleName: z.string().optional(),
  lastName: z
    .string()
    .min(1, 'Last name is required')
    .refine((val) => validator.isAlpha(val), {
      message: 'Last name should contain only alphabetic characters',
    }),
});

const guardianSchema = z.object({
  fatherName: z.string().min(1, "Father's name is required"),
  fatherOccupation: z.string().min(1, "Father's occupation is required"),
  fatherContactNo: z.string().min(1, "Father's contact number is required"),
  motherName: z.string().min(1, "Mother's name is required"),
  motherOccupation: z.string().min(1, "Mother's occupation is required"),
  motherContactNo: z.string().min(1, "Mother's contact number is required"),
});

const localGuardianSchema = z.object({
  name: z.string().min(1, "Local guardian's name is required"),
  occupation: z.string().min(1, "Local guardian's occupation is required"),
  contactNo: z.string().min(1, "Local guardian's contact number is required"),
  address: z.string().min(1, "Local guardian's address is required"),
});

const studentZodValidation = z.object({
  id: z.string(), // Assuming `id` is generated by MongoDB or handled elsewhere
  name: userNameSchema,
  password: z.string().min(1, 'pass is required'),
  gender: z.enum(['male', 'female'], {
    required_error: 'Gender is required',
    invalid_type_error: 'Invalid gender',
  }),
  dateOfBirth: z.string().optional(),
  email: z.string().email('Invalid email address').min(1, 'Email is required'),
  contactNo: z.string().min(1, 'Contact number is required'),
  emergencyContactNo: z.string().min(1, 'Emergency contact number is required'),
  bloodgroup: z.enum(['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'], {
    required_error: 'Blood group is required',
    invalid_type_error: 'Invalid blood group',
  }),
  presentAddress: z.string().min(1, 'Present address is required'),
  permanentAddress: z.string().min(1, 'Permanent address is required'),
  guardian: guardianSchema,
  localGuardian: localGuardianSchema,
  profileImg: z.string().optional(),
  isActive: z.enum(['active', 'blocked']).default('active'),
  isDeleted: z.boolean(),
});

export default studentZodValidation;
